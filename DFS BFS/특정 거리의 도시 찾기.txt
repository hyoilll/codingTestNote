import sys

n,m,k,x = map(int, sys.stdin.readline().rstrip().split())

Graph = [[] for _ in range(n + 1)]

for i in range(m):
  startVertex, endVertex = map(int, sys.stdin.readline().rstrip().split())

  Graph[startVertex].append(endVertex)

# 거리
distance = [999999999 for _ in range(n)]

# startVertex 는 거리 0으로 초기화
distance[x - 1] = 0

# 방문 배열
visited = [False] * n

from collections import deque
def bfs(startVertex):
  q = deque()
  q.append(startVertex)

  while q:
    v = q.popleft()
    visited[v - 1] = True
    for i in Graph[v]:
      # 거리 배열의 값보다 새로 방문한 간선의 길이가 더 적으면 수정
      if (distance[v - 1] + 1) < distance[i - 1]:
        distance[i - 1] = distance[v - 1] + 1
      
      if visited[i - 1] == False:
        q.append(i)

bfs(x)

if k in distance:
  for i in range(len(distance)):
    if distance[i] == k:
      print(i + 1)
else:
  # 주어진 간선의 길이에 맞는 도시가 없는 경우 -1 출력
  print(-1)